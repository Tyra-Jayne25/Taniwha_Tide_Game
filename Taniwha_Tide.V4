import pygame
import sys
import random

# --- Initialize ---
pygame.init()
pygame.font.init()

# --- Constants ---
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 720
FPS = 60
WHITE = (255, 255, 255)
WATER_BLUE = (0, 105, 148)
SEA_BLUE = (70, 130, 180)
BUTTON_COLOR = (0, 150, 200)
BUTTON_HOVER = (0, 180, 230)
TANIWHA_GREEN = (34, 139, 34)
RED = (255, 50, 50)
GREEN = (0, 255, 0)
BROWN = (139, 69, 19)
PINK = (255, 182, 193)

# --- Display ---
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("Taniwha Tide")
clock = pygame.time.Clock()

# --- Fonts ---
try:
    title_font = pygame.font.SysFont("Arial", 72, bold=True)
    button_font = pygame.font.SysFont("Arial", 36)
    health_font = pygame.font.SysFont("Arial", 28)
except:
    title_font = pygame.font.Font(None, 72)
    button_font = pygame.font.Font(None, 36)
    health_font = pygame.font.Font(None, 28)

# --- Button Setup ---
start_button = pygame.Rect(WINDOW_WIDTH//2 - 100, WINDOW_HEIGHT//2 + 50, 200, 60)

# --- Taniwha Sprite ---
taniwha_sprite = pygame.Surface((400, 60))
taniwha_sprite.fill(TANIWHA_GREEN)
taniwha_rect = taniwha_sprite.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 + 150))
taniwha_speed = 5

# --- Game State ---
current_scene = "menu"
camera_x = 0
lives = 5
game_over = False
user_input = ""
answer_feedback = ""
math_question_active = False
current_question = None
boost_active = False
boost_timer = 0
boost_duration = 180

# --- Water Rings ---
water_rings = [
    {"rect": pygame.Rect(600, 300, 80, 80), "question": "1/2 + 1/4", "answer": "3/4", "triggered": False},
    {"rect": pygame.Rect(1200, 450, 80, 80), "question": "2/3 - 1/3", "answer": "1/3", "triggered": False},
    {"rect": pygame.Rect(1800, 250, 80, 80), "question": "3/4 รท 1/2", "answer": "1.5", "triggered": False}
]

# --- Background Image ---
background_image = pygame.image.load("Lvl1_water_background.png").convert()
background_image = pygame.transform.scale(background_image, (WINDOW_WIDTH, WINDOW_HEIGHT))
background_width = background_image.get_width()

# --- Obstacles ---
obstacles = []
obstacle_count = 10
while len(obstacles) < obstacle_count:
    x = random.randint(300, 2400)
    y = random.randint(150, WINDOW_HEIGHT - 150)
    rect = pygame.Rect(x, y, 50, 50)
    # avoid overlaps with water rings
    if any(rect.colliderect(ring["rect"].inflate(20, 20)) for ring in water_rings):
        continue
    kind = random.choice(["net", "jelly"])
    obstacles.append((kind, rect))

# --- Draw Menu ---
def draw_menu():
    screen.fill(WATER_BLUE)
    title_text = title_font.render("Taniwha Tide", True, WHITE)
    screen.blit(title_text, title_text.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 - 100)))
    mouse_pos = pygame.mouse.get_pos()
    color = BUTTON_HOVER if start_button.collidepoint(mouse_pos) else BUTTON_COLOR
    pygame.draw.rect(screen, color, start_button)
    button_text = button_font.render("Start", True, WHITE)
    screen.blit(button_text, button_text.get_rect(center=start_button.center))

# --- Health Bar ---
def draw_health():
    label = health_font.render(f"Lives: {lives}", True, RED)
    screen.blit(label, (20, 20))

# --- Math Question UI ---
def handle_math_question():
    if math_question_active and current_question:
        q = health_font.render(f"Question: {current_question['question']}", True, WHITE)
        a = health_font.render(f"Answer: {user_input}", True, WHITE)
        f = health_font.render(answer_feedback, True, RED if answer_feedback == "Incorrect!" else GREEN)
        screen.blit(q, (WINDOW_WIDTH//2 - 140, 100))
        screen.blit(a, (WINDOW_WIDTH//2 - 140, 140))
        if answer_feedback:
            screen.blit(f, (WINDOW_WIDTH//2 - 140, 180))

# --- Game Over Screen ---
def draw_game_over():
    screen.fill(SEA_BLUE)
    over = title_font.render("GAME OVER", True, RED)
    screen.blit(over, over.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2)))

# --- Draw Water Rings ---
def draw_water_rings():
    for ring in water_rings:
        shifted = ring["rect"].move(-camera_x, 0)
        pygame.draw.ellipse(screen, SEA_BLUE, shifted, 4)

# --- Draw Level 1 ---
def draw_level_one():
    rel_x = camera_x % background_width
    screen.blit(background_image, (-rel_x, 0))
    screen.blit(background_image, (-rel_x + background_width, 0))
    draw_water_rings()
    # draw obstacles
    for kind, rect in obstacles:
        shifted = rect.move(-camera_x, 0)
        color = BROWN if kind == "net" else PINK
        pygame.draw.rect(screen, color, shifted)
    # draw taniwha
    screen.blit(taniwha_sprite, taniwha_rect)
    draw_health()
    handle_math_question()

# --- Movement ---
def handle_movement(keys):
    global camera_x, boost_timer, boost_active
    speed = taniwha_speed + 3 if boost_active else taniwha_speed
    if keys[pygame.K_LEFT] and taniwha_rect.x > 0:
        taniwha_rect.x -= speed
    if keys[pygame.K_RIGHT]:
        taniwha_rect.x += speed
    if keys[pygame.K_UP] and taniwha_rect.y > 0:
        taniwha_rect.y -= speed
    if keys[pygame.K_DOWN] and taniwha_rect.y < WINDOW_HEIGHT - taniwha_rect.height:
        taniwha_rect.y += speed
    # keep camera following before edge
    camera_x = max(0, taniwha_rect.x - WINDOW_WIDTH//2 + 100)
    if boost_active:
        boost_timer -= 1
        if boost_timer <= 0:
            boost_active = False

# --- Triggers & Collisions ---
def check_ring_triggers():
    global math_question_active, user_input, answer_feedback, current_question
    for ring in water_rings:
        shifted = ring["rect"].move(-camera_x, 0)
        if taniwha_rect.colliderect(shifted) and not ring["triggered"]:
            ring["triggered"] = True
            math_question_active = True
            current_question = ring
            user_input = ""
            answer_feedback = ""
            break

def check_obstacle_collision():
    global lives, game_over
    if math_question_active:
        return
    for kind, rect in obstacles:
        shifted = rect.move(-camera_x, 0)
        if taniwha_rect.colliderect(shifted):
            lives -= 1
            obstacles.remove((kind, rect))
            if lives <= 0:
                game_over = True
            break

# --- Main Loop ---
def main():
    global current_scene, user_input, answer_feedback
    global math_question_active, boost_active, boost_timer, lives, game_over

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            elif event.type == pygame.MOUSEBUTTONDOWN and current_scene == "menu":
                if start_button.collidepoint(event.pos):
                    current_scene = "level1"

            elif event.type == pygame.KEYDOWN and current_scene == "level1" and math_question_active:
                if event.key == pygame.K_RETURN:
                    if user_input == current_question["answer"]:
                        answer_feedback = "Correct!"
                        math_question_active = False
                        boost_active = True
                        boost_timer = boost_duration
                    else:
                        answer_feedback = "Incorrect!"
                        lives -= 1
                        math_question_active = False
                        if lives <= 0:
                            game_over = True
                elif event.key == pygame.K_BACKSPACE:
                    user_input = user_input[:-1]
                elif event.unicode.isdigit() or event.unicode in ["/", ".", "-"]:
                    user_input += event.unicode

        keys = pygame.key.get_pressed()

        if current_scene == "menu":
            draw_menu()
        elif current_scene == "level1":
            if game_over:
                draw_game_over()
            else:
                handle_movement(keys)
                check_ring_triggers()
                check_obstacle_collision()
                draw_level_one()

        pygame.display.flip()
        clock.tick(FPS)

    pygame.quit()
    sys.exit()

main()
    