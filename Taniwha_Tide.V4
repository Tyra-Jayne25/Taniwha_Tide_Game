import pygame
import sys
import random
from fractions import Fraction

# --- Initialize ---
pygame.init()
pygame.font.init()

# --- Constants ---
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 720
FPS = 60

WHITE        = (255, 255, 255)
WATER_BLUE   = (0, 105, 148)
SEA_BLUE     = (70, 130, 180)
BUTTON_COLOR = (0, 150, 200)
BUTTON_HOVER = (0, 180, 230)
TANIWHA_GREEN= (34, 139, 34)
RED          = (255, 50, 50)
GREEN        = (0, 255, 0)
BROWN        = (139, 69, 19)
PINK         = (255, 182, 193)

# --- Display ---
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("Taniwha Tide")
clock = pygame.time.Clock()

# --- Fonts ---
try:
    title_font  = pygame.font.SysFont("Arial", 72, bold=True)
    button_font = pygame.font.SysFont("Arial", 36)
    health_font = pygame.font.SysFont("Arial", 28)
except:
    title_font  = pygame.font.Font(None, 72)
    button_font = pygame.font.Font(None, 36)
    health_font = pygame.font.Font(None, 28)

# --- Button Setup ---
start_button = pygame.Rect(WINDOW_WIDTH//2 - 100, WINDOW_HEIGHT//2 + 50, 200, 60)

# --- Taniwha Sprite ---
taniwha_sprite = pygame.Surface((400, 60))
taniwha_sprite.fill(TANIWHA_GREEN)
taniwha_rect   = taniwha_sprite.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 + 150))
taniwha_speed  = 5

# --- Game State ---
current_scene        = "menu"
camera_x             = 0
lives                = 5
game_over            = False
user_input           = ""
answer_feedback      = ""
feedback_timer       = 0
math_question_active = False
current_question     = None
boost_active         = False
boost_timer          = 0
boost_duration       = 180

# --- Level Width ---
level_width = 2200

# --- Water Rings ---
water_rings = [
    {"rect": pygame.Rect(600, 250, 80, 80),  "question": "1/2 + 1/4", "answer_frac": Fraction(3,4), "triggered": False},
    {"rect": pygame.Rect(1300, 400, 80, 80), "question": "2/3 - 1/3", "answer_frac": Fraction(1,3), "triggered": False},
    {"rect": pygame.Rect(2000, 300, 80, 80), "question": "3/4 รท 1/2", "answer_frac": Fraction(3,4) / Fraction(1,2), "triggered": False}
]

# --- Background Image ---
background_image = pygame.image.load("Lvl1_water_background.png").convert()
background_image = pygame.transform.scale(background_image, (WINDOW_WIDTH, WINDOW_HEIGHT))
background_width = background_image.get_width()

# --- Obstacles ---
obstacles = []
OB_SIZE = 80
MIN_DIST_FROM_RING = 200
TARGET_COUNT = 10

while len(obstacles) < TARGET_COUNT:
    x = random.randint(200, level_width - 200)
    y = random.randint(100, WINDOW_HEIGHT - 100 - OB_SIZE)
    new_rect = pygame.Rect(x, y, OB_SIZE, OB_SIZE)
    # ensure minimum distance from any ring center
    too_close = False
    for ring in water_rings:
        ring_center = ring["rect"].center
        dx = new_rect.centerx - ring_center[0]
        dy = new_rect.centery - ring_center[1]
        if (dx*dx + dy*dy)**0.5 < MIN_DIST_FROM_RING:
            too_close = True
            break
    if too_close:
        continue
    # ensure no overlap with existing obstacles
    overlap = any(new_rect.colliderect(o_rect.inflate(OB_SIZE, OB_SIZE)) for _, o_rect in obstacles)
    if overlap:
        continue
    kind = random.choice(["net", "jelly"])
    obstacles.append((kind, new_rect))

# --- Draw Menu ---
def draw_menu():
    screen.fill(WATER_BLUE)
    title = title_font.render("Taniwha Tide", True, WHITE)
    screen.blit(title, title.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 - 100)))
    mouse_pos = pygame.mouse.get_pos()
    col = BUTTON_HOVER if start_button.collidepoint(mouse_pos) else BUTTON_COLOR
    pygame.draw.rect(screen, col, start_button)
    txt = button_font.render("Start", True, WHITE)
    screen.blit(txt, txt.get_rect(center=start_button.center))

# --- Health Bar ---
def draw_health():
    lbl = health_font.render(f"Lives: {lives}", True, RED)
    screen.blit(lbl, (20, 20))

# --- Math Question & Feedback UI ---
def handle_math_question_and_feedback():
    global feedback_timer, answer_feedback
    # question input UI
    if math_question_active and current_question:
        q = health_font.render(f"Question: {current_question['question']}", True, WHITE)
        a = health_font.render(f"Answer: {user_input}", True, WHITE)
        screen.blit(q, (WINDOW_WIDTH//2 - 140, 100))
        screen.blit(a, (WINDOW_WIDTH//2 - 140, 140))
    # feedback UI
    if answer_feedback and feedback_timer > 0:
        color = GREEN if answer_feedback == "Correct!" else RED
        f = health_font.render(answer_feedback, True, color)
        screen.blit(f, (WINDOW_WIDTH//2 - 60, 180))
        feedback_timer -= 1
        if feedback_timer <= 0:
            answer_feedback = ""

# --- Game Over Screen ---
def draw_game_over():
    screen.fill(SEA_BLUE)
    over = title_font.render("GAME OVER", True, RED)
    screen.blit(over, over.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2)))

# --- Draw Water Rings ---
def draw_water_rings():
    for ring in water_rings:
        r = ring["rect"].move(-camera_x, 0)
        pygame.draw.ellipse(screen, SEA_BLUE, r, 4)

# --- Draw Level 1 ---
def draw_level_one():
    # tiled background
    rel_x = camera_x % background_width
    screen.blit(background_image, (-rel_x, 0))
    screen.blit(background_image, (-rel_x + background_width, 0))
    draw_water_rings()
    # obstacles
    for kind, rect in obstacles:
        r = rect.move(-camera_x, 0)
        clr = BROWN if kind == "net" else PINK
        pygame.draw.rect(screen, clr, r)
    # taniwha
    screen.blit(taniwha_sprite, taniwha_rect)
    draw_health()
    handle_math_question_and_feedback()

# --- Movement & Camera ---
def handle_movement(keys):
    global camera_x, boost_timer, boost_active
    speed = taniwha_speed + 3 if boost_active else taniwha_speed
    if keys[pygame.K_LEFT] and taniwha_rect.x > 0:
        taniwha_rect.x -= speed
    if keys[pygame.K_RIGHT] and taniwha_rect.x < level_width - taniwha_rect.width:
        taniwha_rect.x += speed
    if keys[pygame.K_UP] and taniwha_rect.y > 0:
        taniwha_rect.y -= speed
    if keys[pygame.K_DOWN] and taniwha_rect.y < WINDOW_HEIGHT - taniwha_rect.height:
        taniwha_rect.y += speed

    # camera follow thresholds
    left_bound  = WINDOW_WIDTH * 0.3
    right_bound = WINDOW_WIDTH * 0.7
    cx = taniwha_rect.centerx - camera_x
    if cx > right_bound:
        camera_x = taniwha_rect.centerx - right_bound
    elif cx < left_bound:
        camera_x = taniwha_rect.centerx - left_bound
    camera_x = max(0, min(camera_x, level_width - WINDOW_WIDTH))

    # boost timeout
    if boost_active:
        boost_timer -= 1
        if boost_timer <= 0:
            boost_active = False

# --- Triggers & Collisions ---
def check_ring_triggers():
    global math_question_active, user_input, answer_feedback, feedback_timer, current_question
    for ring in water_rings:
        r = ring["rect"].move(-camera_x, 0)
        if taniwha_rect.colliderect(r) and not ring["triggered"]:
            ring["triggered"] = True
            math_question_active = True
            current_question = ring
            user_input = ""
            answer_feedback = ""
            feedback_timer = 0
            break

def check_obstacle_collision():
    global lives, game_over
    if math_question_active:
        return
    for kind, rect in obstacles:
        r = rect.move(-camera_x, 0)
        if taniwha_rect.colliderect(r):
            lives -= 1
            obstacles.remove((kind, rect))
            if lives <= 0:
                game_over = True
            break

# --- Main Loop ---
def main():
    global current_scene, user_input, answer_feedback
    global math_question_active, boost_active, boost_timer
    global lives, game_over, feedback_timer

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            # start button
            elif event.type == pygame.MOUSEBUTTONDOWN and current_scene == "menu":
                if start_button.collidepoint(event.pos):
                    current_scene = "level1"

            # math input
            elif event.type == pygame.KEYDOWN and current_scene == "level1" and math_question_active:
                if event.key == pygame.K_RETURN:
                    # parse answer
                    try:
                        ans_frac = Fraction(user_input)
                    except:
                        try:
                            ans_frac = Fraction(float(user_input)).limit_denominator()
                        except:
                            ans_frac = None

                    if ans_frac == current_question["answer_frac"]:
                        answer_feedback = "Correct!"
                        boost_active = True
                        boost_timer = boost_duration
                    else:
                        answer_feedback = "Incorrect!"
                        lives -= 1
                        if lives <= 0:
                            game_over = True

                    # show feedback
                    feedback_timer = FPS * 2  # 2 seconds
                    math_question_active = False

                elif event.key == pygame.K_BACKSPACE:
                    user_input = user_input[:-1]
                elif event.unicode.isdigit() or event.unicode in ["/", ".", "-"]:
                    user_input += event.unicode

        keys = pygame.key.get_pressed()

        if current_scene == "menu":
            draw_menu()
        elif current_scene == "level1":
            if game_over:
                draw_game_over()
            else:
                handle_movement(keys)
                check_ring_triggers()
                check_obstacle_collision()
                draw_level_one()

        pygame.display.flip()
        clock.tick(FPS)

    pygame.quit()
    sys.exit()

main()