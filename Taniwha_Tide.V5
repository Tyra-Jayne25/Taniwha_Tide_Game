import pygame
import sys
import random
from fractions import Fraction

pygame.init()
pygame.font.init()

# --- Constants ---
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 720
FPS = 60
WHITE = (255, 255, 255)
WATER_BLUE = (0, 105, 148)
SEA_BLUE = (70, 130, 180)
BUTTON_COLOR = (0, 150, 200)
BUTTON_HOVER = (0, 180, 230)
TANIWHA_GREEN = (34, 139, 34)
RED = (255, 50, 50)
GREEN = (0, 255, 0)

# --- Display ---
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))
pygame.display.set_caption("Taniwha Tide")
clock = pygame.time.Clock()

# --- Fonts ---
title_font = pygame.font.SysFont("Arial", 72, bold=True)
button_font = pygame.font.SysFont("Arial", 36)
health_font = pygame.font.SysFont("Arial", 28)

# --- Assets ---
net_image = pygame.image.load("net_obstacle.png").convert_alpha()
jelly_image = pygame.image.load("jelly_obstacle.png").convert_alpha()

# --- Game State ---
current_scene = "menu"
camera_x = 0
lives = 5
game_over = False
user_input = ""
answer_feedback = ""
feedback_timer = 0
math_question_active = False
current_question = None
boost_active = False
boost_timer = 0
boost_duration = 180
level_complete = False

# --- Taniwha ---
taniwha_sprite = pygame.Surface((400, 60))
taniwha_sprite.fill(TANIWHA_GREEN)
taniwha_rect = taniwha_sprite.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 + 150))
taniwha_speed = 5

# --- Buttons ---
start_button = pygame.Rect(WINDOW_WIDTH//2 - 100, WINDOW_HEIGHT//2 + 50, 200, 60)

# --- Background ---
background_image = pygame.image.load("Lvl1_water_background.png").convert()
background_image = pygame.transform.scale(background_image, (WINDOW_WIDTH, WINDOW_HEIGHT))
background_width = background_image.get_width()

# --- Level Setup ---
level_width = 3000

# --- Water Rings (Level 1: Fractions) ---
fraction_questions = [
    ("1/2 + 1/4", Fraction(3,4)),
    ("2/3 - 1/3", Fraction(1,3)),
    ("3/4 รท 1/2", Fraction(3,4) / Fraction(1,2)),
    ("5/6 - 1/2", Fraction(1,3)),
    ("2/5 + 3/10", Fraction(7,10)),
    ("3/8 ร 2", Fraction(6,8)),
    ("7/9 - 4/9", Fraction(3,9)),
    ("1/3 + 1/6", Fraction(1,2)),
    ("5/12 รท 5", Fraction(1,12)),
    ("4/5 - 2/5", Fraction(2,5))
]

water_rings = []
for i, (q, a) in enumerate(fraction_questions):
    x = 600 + i * 250
    y = 250 + (i % 2) * 100
    ring = {
        "rect": pygame.Rect(x, y, 80, 80),
        "question": q,
        "answer_frac": a,
        "triggered": False
    }
    water_rings.append(ring)

# --- Portal to Level 2 ---
portal_rect = pygame.Rect(level_width - 150, WINDOW_HEIGHT//2, 100, 100)

# --- Obstacles ---
obstacles = []
for i in range(15):
    x = random.randint(300, level_width - 300)
    y = random.randint(100, WINDOW_HEIGHT - 150)
    kind = random.choice(["net", "jelly"])
    rect = pygame.Rect(x, y, 80, 80)
    if any(rect.colliderect(r["rect"].inflate(100, 100)) for r in water_rings):
        continue
    obstacles.append((kind, rect))

# --- Algebra Questions (Level 2) ---
algebra_questions = [
    ("x + 3 = 7", "4"),
    ("2x = 10", "5"),
    ("x - 5 = 2", "7"),
    ("3x + 2 = 11", "3"),
    ("x/2 = 6", "12")
]

algebra_rings = []
for i, (q, a) in enumerate(algebra_questions):
    x = 600 + i * 250
    y = 300
    ring = {
        "rect": pygame.Rect(x, y, 80, 80),
        "question": q,
        "answer": a,
        "triggered": False
    }
    algebra_rings.append(ring)

# --- Draw Functions ---
def draw_menu():
    screen.fill(WATER_BLUE)
    title = title_font.render("Taniwha Tide", True, WHITE)
    screen.blit(title, title.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2 - 100)))
    mouse_pos = pygame.mouse.get_pos()
    color = BUTTON_HOVER if start_button.collidepoint(mouse_pos) else BUTTON_COLOR
    pygame.draw.rect(screen, color, start_button)
    txt = button_font.render("Start", True, WHITE)
    screen.blit(txt, txt.get_rect(center=start_button.center))

def draw_health():
    label = health_font.render(f"Lives: {lives}", True, RED)
    screen.blit(label, (20, 20))

def draw_feedback():
    global feedback_timer, answer_feedback
    if answer_feedback and feedback_timer > 0:
        color = GREEN if answer_feedback == "Correct!" else RED
        text = health_font.render(answer_feedback, True, color)
        screen.blit(text, (WINDOW_WIDTH//2 - 60, 180))
        feedback_timer -= 1
        if feedback_timer <= 0:
            answer_feedback = ""

def draw_question():
    if math_question_active and current_question:
        q = health_font.render(f"Question: {current_question['question']}", True, WHITE)
        a = health_font.render(f"Answer: {user_input}", True, WHITE)
        screen.blit(q, (WINDOW_WIDTH//2 - 140, 100))
        screen.blit(a, (WINDOW_WIDTH//2 - 140, 140))

def draw_portal():
    shifted = portal_rect.move(-camera_x, 0)
    pygame.draw.rect(screen, (255, 255, 0), shifted)

def draw_rings(rings):
    for ring in rings:
        shifted = ring["rect"].move(-camera_x, 0)
        pygame.draw.ellipse(screen, SEA_BLUE, shifted, 4)

def draw_obstacles():
    for kind, rect in obstacles:
        shifted = rect.move(-camera_x, 0)
        if kind == "net":
            screen.blit(net_image, shifted)
        else:
            screen.blit(jelly_image, shifted)

def draw_taniwha():
    screen.blit(taniwha_sprite, taniwha_rect.move(-camera_x, 0))

def draw_level(rings, show_portal=False):
    screen.blit(background_image, (0, 0))
    draw_rings(rings)
    draw_obstacles()
    draw_taniwha()
    draw_health()
    draw_question()
    draw_feedback()
    if show_portal:
        draw_portal()

def draw_game_over():
    screen.fill(SEA_BLUE)
    over = title_font.render("GAME OVER", True, RED)
    screen.blit(over, over.get_rect(center=(WINDOW_WIDTH//2, WINDOW_HEIGHT//2)))

# --- Movement ---
def handle_movement(keys):
    global camera_x, boost_timer, boost_active
    speed = taniwha_speed + 3 if boost_active else taniwha_speed
    if keys[pygame.K_LEFT]:
        taniwha_rect.x -= speed
    if keys[pygame.K_RIGHT]:
        taniwha_rect.x += speed
    if keys[pygame.K_UP]:
        taniwha_rect.y -= speed
    if keys[pygame.K_DOWN]:
        taniwha_rect.y += speed
    taniwha_rect.x = max(0, min(taniwha_rect.x, level_width - taniwha_rect.width))
    taniwha_rect.y = max(0, min(taniwha_rect.y, WINDOW_HEIGHT - taniwha_rect.height))
    camera_x = max(0, min(taniwha_rect.centerx - WINDOW_WIDTH//2, level_width - WINDOW_WIDTH))
    if boost_active:
        boost_timer -= 1
        if boost_timer <= 0:
            boost_active = False

# --- Input Handling ---
def handle_input(event):
    global user_input, answer_feedback, feedback_timer, math_question_active
    if event.key == pygame.K_BACKSPACE:
        user_input = user_input[:-1]
    elif event.key == pygame.K_RETURN:
        if current_scene == "level1":
            for ring in water_rings:
                if ring["triggered"]:
                    try:
                        if Fraction(user_input) == ring["answer_frac"]:
                            answer_feedback = "Correct!"
                            ring["triggered"] = False
                        else:
                            answer_feedback = "Incorrect!"
                            lose_life()
                    except:
                        answer_feedback = "Invalid input!"
                    feedback_timer = 120
                    user_input = ""
                    math_question_active = False
        elif current_scene == "level2":
            for ring in algebra_rings:
                if ring["triggered"]:
                    if user_input == ring["answer"]:
                        answer_feedback = "Correct!"
                        ring["triggered"] = False
                    else:
                        answer_feedback = "Incorrect!"
                        lose_life()
                    feedback_timer = 120
                    user_input = ""
                    math_question_active = False

        else:
         user_input += event.unicode

# --- Life Loss ---
def lose_life():
    global lives, game_over
    lives -= 1
    if lives <= 0:
        game_over = True

# --- Ring Triggering ---
def check_ring_trigger(rings):
    global current_question, math_question_active
    for ring in rings:
        if taniwha_rect.colliderect(ring["rect"]) and not ring["triggered"]:
            ring["triggered"] = True
            current_question = ring
            math_question_active = True
            break

# --- Portal Activation ---
def all_questions_answered(rings):
    return all(not ring["triggered"] for ring in rings)

# --- Main Loop ---
running = True
while running:
    clock.tick(FPS)
    keys = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if current_scene == "menu" and start_button.collidepoint(event.pos):
                current_scene = "level1"
        elif event.type == pygame.KEYDOWN:
            handle_input(event)

    if current_scene == "menu":
        draw_menu()

    elif current_scene == "level1":
        if not game_over:
            handle_movement(keys)
            check_ring_trigger(water_rings)
            if taniwha_rect.colliderect(portal_rect) and all_questions_answered(water_rings):
                current_scene = "level2"
                taniwha_rect.x = 100
                camera_x = 0
            draw_level(water_rings, show_portal=True)
        else:
            draw_game_over()

    elif current_scene == "level2":
        if not game_over:
            handle_movement(keys)
            check_ring_trigger(algebra_rings)
            draw_level(algebra_rings)
        else:
            draw_game_over()

    pygame.display.flip()

pygame.quit()
sys.exit()